// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// calculate_sliding_mean
NumericVector calculate_sliding_mean(NumericVector iv, int ws);
RcppExport SEXP _germs_calculate_sliding_mean(SEXP ivSEXP, SEXP wsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type iv(ivSEXP);
    Rcpp::traits::input_parameter< int >::type ws(wsSEXP);
    rcpp_result_gen = Rcpp::wrap(calculate_sliding_mean(iv, ws));
    return rcpp_result_gen;
END_RCPP
}
// kmer_chopper
CharacterVector kmer_chopper(std::string input_seq, int k_len);
RcppExport SEXP _germs_kmer_chopper(SEXP input_seqSEXP, SEXP k_lenSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type input_seq(input_seqSEXP);
    Rcpp::traits::input_parameter< int >::type k_len(k_lenSEXP);
    rcpp_result_gen = Rcpp::wrap(kmer_chopper(input_seq, k_len));
    return rcpp_result_gen;
END_RCPP
}
// list_kmer_multivalencies
List list_kmer_multivalencies(List ins, int k_len, int window_size, NumericMatrix hamming_distances, NumericVector positional_distances);
RcppExport SEXP _germs_list_kmer_multivalencies(SEXP insSEXP, SEXP k_lenSEXP, SEXP window_sizeSEXP, SEXP hamming_distancesSEXP, SEXP positional_distancesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type ins(insSEXP);
    Rcpp::traits::input_parameter< int >::type k_len(k_lenSEXP);
    Rcpp::traits::input_parameter< int >::type window_size(window_sizeSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type hamming_distances(hamming_distancesSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type positional_distances(positional_distancesSEXP);
    rcpp_result_gen = Rcpp::wrap(list_kmer_multivalencies(ins, k_len, window_size, hamming_distances, positional_distances));
    return rcpp_result_gen;
END_RCPP
}
// rcpp_hello
List rcpp_hello();
RcppExport SEXP _germs_rcpp_hello() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(rcpp_hello());
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_germs_calculate_sliding_mean", (DL_FUNC) &_germs_calculate_sliding_mean, 2},
    {"_germs_kmer_chopper", (DL_FUNC) &_germs_kmer_chopper, 2},
    {"_germs_list_kmer_multivalencies", (DL_FUNC) &_germs_list_kmer_multivalencies, 5},
    {"_germs_rcpp_hello", (DL_FUNC) &_germs_rcpp_hello, 0},
    {NULL, NULL, 0}
};

RcppExport void R_init_germs(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
